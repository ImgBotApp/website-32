---
project:
  name: aura
  description: ''
  version: 0.9.0
  url: http://aurajs.com
  sha: 3dd0d4c
files:
  lib/ext/components.js:
    name: lib/ext/components.js
    modules: {}
    classes:
      Component: 1
    fors: {}
    namespaces: {}
  lib/ext/mediator.js:
    name: lib/ext/mediator.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  lib/aura.js:
    name: lib/aura.js
    modules: {}
    classes:
      Aura: 1
      Sandbox: 1
    fors: {}
    namespaces: {}
modules: {}
classes:
  Component:
    name: Component
    shortname: Component
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    file: lib/ext/components.js
    line: 70
    description: The base Component constructor...
    is_constructor: 1
    params:
    - name: options
      description: the options to init the component...
      type: Object
  Aura:
    name: Aura
    shortname: Aura
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    file: lib/aura.js
    line: 11
    description: ! "Aura constructor and main entry point\n\nEvery instance of Aura
      is an Aura application.\nAn Aura application is in charge of loading the various\nextensions
      that will apply to it (defined either\nprogrammatically or by way of configuration).\n\nAn
      Aura application is the glue between all the extensions\nand components inside
      its instance.\n\nInternally an Aura application wraps 4 important objects:\n\n-
      `config` is the object passed as the first param of the apps constructor\n-
      `core`   is a container where the extensions add new features\n- `sandbox` is
      an object that will be used as a prototype, to create fresh sandboxes to the
      components\n- `extensions` An instance of the ExtensionManager. It contains
      all the extensions that will be loaded in the app.\n\nExtensions are here to
      provide features that will be used by the components...\nThey are meant to extend
      the apps' core & sandbox.\nThey also have access to the apps's config.\n\nExample
      of a creation of an Aura Application:\n\n    var app = aura({ key: 'value' });\n
      \   app.use('ext1').use('ext2');\n    app.components.addSource('supercomponents',
      'https://my.extern.al/components/store');\n    app.start('body');"
    params:
    - name: config
      description: Main App config.
      type: Object
      optional: true
    itemtype: method
  Sandbox:
    name: Sandbox
    shortname: Sandbox
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    file: lib/aura.js
    line: 278
classitems:
- file: lib/ext/components.js
  line: 15
  description: Components registry
  type: ! '{Object}'
  class: Component
- file: lib/ext/components.js
  line: 21
  description: Components Callbacks
  class: Component
- file: lib/ext/components.js
  line: 79
  description: ! 'The Components'' options Object, passed to its constructor.

    TODO: Add explain, how options are set from HTML API + which default options are

    set during the Component initialization.'
  itemtype: property
  name: options
  type: Object
  class: Component
- file: lib/ext/components.js
  line: 88
  description: Internal, unique reference for a Component instance
  itemtype: property
  name: _ref
  type: String
  class: Component
- file: lib/ext/components.js
  line: 95
  description: A cached jQuery object for the Components's element.
  itemtype: property
  name: $el
  type: Object
  class: Component
- file: lib/ext/components.js
  line: 106
  description: Method called on Components' initialization.
  itemtype: method
  name: initialize
  params:
  - name: options
    description: options Object passed on Component initialization
    type: Object
  class: Component
- file: lib/ext/components.js
  line: 114
  description: A helper function to render markup and recursilvely start nested components.
  itemtype: method
  name: html
  params:
  - name: markup
    description: the markup to render in the component's root el
    type: String
  return:
    description: the Component instance to allow methods chaining...
    type: Component
  class: Component
- file: lib/ext/components.js
  line: 131
  description: A helper function to find matching elements within the Component's
    root element.
  itemtype: method
  name: $find
  params:
  - name: selector
    description: CSS selector or jQuery object.
    type: Selector | jQuery Object | Element
  return:
    description: ''
    type: JQuery Object
  class: Component
- file: lib/ext/components.js
  line: 142
  itemtype: method
  name: invokeWithCallbacks
  params:
  - name: methodName
    description: the name of the method to invoke with callbacks
    type: String
  return:
    description: a Promise that will resolve to the return value of the original function
      invoked.
    type: Promise
  class: Component
- file: lib/ext/components.js
  line: 175
  description: Component loader.
  params:
  - name: name
    description: The name of the Component to load
    type: String
  - name: options
    description: The options to pass to the new component instance.
    type: Object
  return:
    description: A Promise that resolves to the loaded component instance.
    type: Promise
  class: Component
- file: lib/ext/components.js
  line: 270
  description: Parses the component's options from its element's data attributes.
  access: private
  tagname: ''
  params:
  - name: el
    description: the element
    type: String|DomNode
  - name: namespace
    description: current Component's detected namespace
    type: String
  - name: opts
    description: an Object containing the base Component's options to extend.
    type: String
  return:
    description: An object that contains the Component's options
    type: Object
  class: Component
- file: lib/ext/components.js
  line: 301
  description: Parses the component's options from its element's data attributes.
  access: private
  tagname: ''
  params:
  - name: name
    description: the Component's name
    type: String
  - name: opts
    description: an Object containing the base Component's options to extend.
    type: Object
  return:
    description: An object that contains the component's options
    type: Object
  class: Component
- file: lib/ext/components.js
  line: 328
  description: ! 'Returns a list of component.

    If the first argument is a String, it is considered as a DomNode reference

    We then parse its content to find aura-components inside of it.'
  static: 1
  params:
  - name: components
    description: a list of components or a reference to a root dom node
    type: Array|String
  return:
    description: a list of component with their options
    type: Array
  class: Component
- file: lib/ext/components.js
  line: 367
  description: Actual start method for a list of components.
  static: 1
  params:
  - name: components
    description: cf. `Component.parseList`
    type: Array|String
  return:
    description: a promise that resolves to a list of started components.
    type: Promise
  class: Component
- file: lib/ext/components.js
  line: 400
  description: ! 'Registers a function that will be executed before the associated

    Component method is called.


    Once registered, every time a component method will be called with the

    `invokeWithCallbacks` method the registered callbacks will execute accordingly.


    The callback functions can return a promise if required in order to

    postpone the execution of the called function up to when the all

    registered callbacks results are resolved.


    The arguments passed to the callbacks are the same than those which

    with the component will be called. The scope of the callback is

    the component instance itself, as per the component method.'
  itemtype: method
  name: components.before
  params:
  - name: methodName
    description: eg. 'initialize', 'remove'
    type: String
  - name: fn
    description: actual function to run
    type: Function
  class: Aura
- file: lib/ext/components.js
  line: 424
  description: Same as components.before, but executed after the method invocation.
  itemtype: method
  name: components.after
  params:
  - name: methodName
    description: eg. 'initialize', 'remove'
    type: ! '[type]'
  - name: fn
    description: actual function to run
    type: Function
  class: Aura
- file: lib/ext/components.js
  line: 442
  description: ! "Register a Component Type (experimental).\nComponents type ca be
    used to encapsulate many custom components behaviours.\nThey will be then used
    while declaring your components as follows:\n\n```js\ndefine({\n  type: 'myComponentType',\n
    \ // component declaration...\n});\n```"
  itemtype: method
  name: components.addType
  params:
  - name: type
    description: a string that will identify the component type.
    type: String
  - name: def
    description: A constructor the this component type
    type: Function
  class: Aura
- file: lib/ext/components.js
  line: 470
  description: ! 'Start method.

    This method takes either an Array of Components to start or or DOM Selector to

    target the element that will be parsed to look for Components to start.'
  itemtype: method
  name: start
  params:
  - name: list
    description: Array of Components to start or parent node.
    type: Array|DOM Selector
  - name: options
    description: ! "Available options: `reset` : if true, all current children\n                                     will
      be stopped before start."
    type: Object
  class: Sandbox
- file: lib/ext/mediator.js
  line: 62
  itemtype: method
  name: 'on'
  params:
  - name: name
    description: Pattern of event to subscrbibe to.
    type: String
  class: Sandbox
- file: lib/ext/mediator.js
  line: 68
  itemtype: method
  name: once
  params:
  - name: name
    description: Pattern of event to subscrbibe to.
    type: String
  class: Sandbox
- file: lib/ext/mediator.js
  line: 74
  itemtype: method
  name: 'off'
  params:
  - name: name
    description: Pattern of event to subscrbibe to.
    type: String
  - name: listener
    description: Listener function to stop.
    type: Function
  class: Sandbox
- file: lib/ext/mediator.js
  line: 89
  itemtype: method
  name: emit
  params:
  - name: name
    description: Event name to emit
    type: String
  - name: payload
    description: Payload emitted
    type: Object
  class: Sandbox
- file: lib/ext/mediator.js
  line: 104
  itemtype: method
  name: stopListening
  class: Sandbox
- file: lib/aura.js
  line: 53
  description: The App's internal unique reference.
  itemtype: property
  name: ref
  type: String
  class: Aura
- file: lib/aura.js
  line: 60
  description: The App's config object
  itemtype: property
  name: config
  type: Object
  class: Aura
- file: lib/aura.js
  line: 76
  description: Namespace for sanboxes related methods.
  type: ! '{Object}'
  class: Aura
- file: lib/aura.js
  line: 83
  description: Creates a brand new sandbox, using the App's `sandbox` object as a
    prototype.
  itemtype: method
  name: sandboxes.create
  params:
  - name: ref
    description: the Sandbox unique ref
    type: String
    optional: true
  - name: options
    description: an object to that directly extends the Sandbox
    type: Object
    optional: true
  return:
    description: ''
    type: Sandbox
  class: Aura
- file: lib/aura.js
  line: 122
  description: Get a sandbox by reference.
  itemtype: method
  name: sandboxes.get
  params:
  - name: ref
    description: the Sandbox ref to retreive
    type: String
  return:
    description: ''
    type: Sandbox
  class: Aura
- file: lib/aura.js
  line: 133
  description: ! 'Tells the app to load the given extension.


    Aura extensions are loaded in the app during init.

    they are responsible for :


    - resolving & loading external dependencies via requirejs

    - they have a direct access to the app''s internals

    - they are here to add new features to the app... that are made available through
    the sandboxes to the components.


    This method can only be called before the App is actually started.

    Note that the App is started when its `start` method is called.'
  itemtype: method
  name: use
  params:
  - name: ref
    description: the reference of the extension
    type: String | Object | Function
  return:
    description: the Aura app object
    type: Aura
  chainable: 1
  class: Aura
- file: lib/aura.js
  line: 156
  description: Namespace for components related methods.
  type: ! '{Object}'
  class: Aura
- file: lib/aura.js
  line: 163
  description: ! 'Adds a new source for components.

    A Component source is an endpoint (basically a URL)

    that is the root of a component repository.'
  itemtype: method
  name: components.addSource
  params:
  - name: name
    description: the name of the source.
    type: String
  - name: baseUrl
    description: the base url for those components.
    type: String
  class: Aura
- file: lib/aura.js
  line: 180
  description: ! '`core` is just a namespace used by the extensions to add features
    to the App.'
  itemtype: property
  name: core
  type: Object
  class: Aura
- file: lib/aura.js
  line: 187
  description: ! 'Application start.


    Bootstraps the extensions loading process.

    All the extensions are resolved and loaded when `start` id called.

    Start returns a promis e that shall fail if any of the

    extensions fails to load.


    The app''s responsibility is to load its extensions,

    make sure they are properly loaded when the app starts

    and eventually make sure they are properly cleaned up when the app stops'
  itemtype: method
  name: start
  params:
  - name: options
    description: start options.
    type: Object | String | Array
  return:
    description: a promise that resolves when the app is started.
    type: Promise
  class: Aura
- file: lib/aura.js
  line: 250
  description: Stops the application and unregister its loaded dependencies.
  itemtype: method
  name: stop
  return:
    description: ''
    type: Void
  class: Aura
- file: lib/aura.js
  line: 261
  description: ! 'Sandboxes are a way to implement the facade pattern on top of the
    features provided by `core`.


    The `sandbox` property of an Aura App is just an Object that will be used

    as a blueprint, once the app is started, to create new instances

    of sandboxed environments for the Components.'
  itemtype: property
  name: sandbox
  type: Object
  class: Aura
- file: lib/aura.js
  line: 271
  description: App Logger
  itemtype: property
  name: logger
  type: Logger
  class: Aura
- file: lib/aura.js
  line: 282
  description: ! 'Stop method for a Sandbox.

    If no arguments provided, the sandbox itself and all its children are stopped.

    If a DOM Selector is provided, all matching children will be stopped.'
  params:
  - name: DOM
    description: Selector
    type: Undefined|String
  class: Sandbox
warnings:
- message: ! 'Missing item type

    Components registry'
  line: ! ' lib/ext/components.js:15'
- message: ! 'Missing item type

    Components Callbacks'
  line: ! ' lib/ext/components.js:21'
- message: ! 'Missing item type

    Component loader.'
  line: ! ' lib/ext/components.js:175'
- message: ! 'Missing item type

    Parses the component''s options from its element''s data attributes.'
  line: ! ' lib/ext/components.js:270'
- message: ! 'Missing item type

    Parses the component''s options from its element''s data attributes.'
  line: ! ' lib/ext/components.js:301'
- message: ! 'Missing item type

    Returns a list of component.

    If the first argument is a String, it is considered as a DomNode reference

    We then parse its content to find aura-components inside of it.'
  line: ! ' lib/ext/components.js:328'
- message: ! 'Missing item type

    Actual start method for a list of components.'
  line: ! ' lib/ext/components.js:367'
- message: ! 'Missing item type

    Namespace for sanboxes related methods.'
  line: ! ' lib/aura.js:76'
- message: ! 'Missing item type

    Namespace for components related methods.'
  line: ! ' lib/aura.js:156'
- message: ! 'Missing item type

    Stop method for a Sandbox.

    If no arguments provided, the sandbox itself and all its children are stopped.

    If a DOM Selector is provided, all matching children will be stopped.'
  line: ! ' lib/aura.js:282'
